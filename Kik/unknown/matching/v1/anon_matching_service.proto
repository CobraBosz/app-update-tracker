syntax = "proto3";
package mobile.matching.v1;

option java_package = "com.kik.matching.rpc";
option go_package = "github.com/kikinteractive/xiphias-api-mobile/generated/go/matching/v1;matching";

import "protobuf_validation.proto";
import "google/protobuf/timestamp.proto";

import "common_model.proto";
import "common/v1/model.proto";
import "matching/v1/matching_common.proto";

// These endpoints facilitate clients starting, ending and voting on anonymous chat sessions
service AnonMatching {
    // Finds a chat partner, starting a new chat session request or updates an existing request 
    // if there's already something in the queue
    rpc FindChatPartner (FindChatPartnerRequest) returns (FindChatPartnerResponse);

    // Cancels a find chat partner request.  If a session has already been created, it will not
    // be cancelled, and the session details will still be returned to clients as normal
    rpc CancelFindChatPartner (CancelFindChatPartnerRequest) returns (CancelFindChatPartnerResponse);

    // Ends a chat session before the chat expiry duration.  The other chat partner
    // will be notified that the chat has ended prematurely, and the chat session will be
    // marked for eventual cleanup
    rpc EndChatSession (EndChatSessionRequest) returns (EndChatSessionResponse);

    // Returns session details
    rpc GetChatSession (GetChatSessionRequest) returns (GetChatSessionResponse);

    // Allows either chat participant to provide a rating for their chat experience.
    // This rating will be sent off to data, and could be used to limit chats, or for 
    // Matching purposes in the future
    rpc RateChatSession(RateChatSessionRequest) returns (RateChatSessionResponse);

    // Used by clients to query the number of chats the server will allow a user before
    // they are rate limited
    rpc GetRemainingAnonChats(GetRemainingAnonChatsRequest) returns (GetRemainingAnonChatsResponse);

    // Idempotent method to initiate upgrading an anon chat to a real conversation with real jids.
    // This request will only indicate that the caller wants to become friends with 
    // their anon chat partner, and will return immediately.
    // The caller must be a member of the chat session or this will result in an error.
    //
    // Once both chat participants have requested friending, then the session will end, and a message will 
    // be sent to both users, indicating the session has ended, the chat partner's real jid will be provided,
    // and clients will handle upgrading the chat and requesting their new friend's user info.
    rpc InitiateFriending(InitiateFriendingRequest) returns (InitiateFriendingResponse);

    // Users call this to submit a new interest
    rpc SubmitUserGeneratedInterest(SubmitUserGeneratedInterestRequest) returns (SubmitUserGeneratedInterestResponse);
}

// If the user already has an ongoing search in the queue, it will be updated
// by sending another FindChatPartnerRequest. It is considered normal behaviour and
// no exception or warning or special status code is returned
message FindChatPartnerRequest {

    // If no interests are included in this request, this is considered a "quick chat",
    // and users will be matched with anyone.
    repeated ChatInterest interests = 1 [(kik.validation.field_validation) = {
        // in practice, the server may ignore or disallow more than 5 interests.  
        // bounding this high to allow for speculative future interest requirements.
        max_repetitions: 5  
    }];

    // Matching Variant defines the queue to search a partner.
    // If a value is not provided, the default queue will be used.
    // For certain whitelisted accounts (QA accounts), a different queue is used.
    // Providing a value for matching_variant will override any other default queue setting.
    string matching_variant = 2;
}

message FindChatPartnerResponse {
    Result result = 1;
    enum Result {
        // Chat partner immediately found and will be returned with this response
        PARTNER_FOUND = 0;

        // Chat partner not found (yet), user has been put in queue
        IN_QUEUE = 1;

        // The rejected response is a general rejection status that encompasses any rejections not covered by
        // other REJECTED_* result codes, such as too many active chat sessions,
        // or Bouncer rejections (spam analysis)
        // If the user is in the queue already his requested is updated but not rejected
        REJECTED = 2;

        // User has exceeded their daily limit of sessions
        REJECTED_NO_REMAINING_SESSIONS = 3;

        // User is temporarily banned for bad behavior
        REJECTED_TEMPORARILY_BANNED = 4;
    }

    // The optional id of the request, can be used to cancel this request if in queue
    // Will not be present unless result = (PARTNER_FOUND or IN_QUEUE)
    common.XiUuid find_chat_request_id = 2;

    // optional, will only be present if result = PARTNER_FOUND
    SessionDetails session_details = 3;

    // In case of a rejection, this is the (UTC) timestamp of when the user
    // will be allowed to return and request a new anon-chat.
    //
    // Will only be present if the rejection is for any reason that can expire
    // such as REJECTED_NO_REMAINING_SESSIONS or REJECTED_TEMPORARILY_BANNED
    google.protobuf.Timestamp rejected_expiry_time = 4;
}

message CancelFindChatPartnerRequest {
    // The id that was returned by the FindChatPartnerResponse should be used here to cancel the request
    common.XiUuid find_chat_request_id = 1 [(kik.validation.field_validation) = { mandatory: true }];
}

message CancelFindChatPartnerResponse {
    Result result = 1;
    enum Result {
        // Find chat session request successfully cancelled
        OK = 0;

        // Chat session has already been created, the session will not be cancelled,
        // details will be included in the same way that clients
        // waiting after a FindChatSessionResponse.Result.IN_QUEUE receive them 
        SESSION_ALREADY_CREATED = 1;
    }
}

message GetChatSessionRequest {
    common.matching.v1.AnonMatchingSessionKey session_key = 1 [(kik.validation.field_validation) = {
        mandatory: true
    }];
}

message GetChatSessionResponse {
    Result result = 1;
    enum Result {
        // Chat session found, details will be provided.
        OK = 0;
        // Chat session not found.  Either invalid id or session already cleaned up.
        NOT_FOUND = 1;
    }

    // Will only be present if Result = OK
    SessionDetails session_details = 2;
}

message RateChatSessionRequest {
    // The chat session key
    common.matching.v1.AnonMatchingSessionKey session_key = 1 [(kik.validation.field_validation) = {
        mandatory: true
    }];

    // How the user has rated this session
    ChatSessionRating chat_rating = 2 [(kik.validation.field_validation) = {
        mandatory: true
    }];
}

message ChatSessionRating {
    // The rating provided by the user.
    SmileyChatRating rating = 1;

    // This corresponds to the smilies that users click to rate chats
    enum SmileyChatRating {
        MAD_FACE = 0;
        SAD_FACE = 1;
        NEUTRAL_FACE = 2;
        HAPPY_FACE = 3;
        OPEN_MOUTH_HAPPY_FACE = 4;
    }
}

message RateChatSessionResponse {
    Result result = 1;
    enum Result {
        // Rating logged
        OK = 0;
        // Chat session not found or expired.  Clients should not retry this.
        NOT_FOUND = 1;
    }
}

message EndChatSessionRequest {
    common.matching.v1.AnonMatchingSessionKey session_key = 1 [(kik.validation.field_validation) = {
        mandatory: true
    }];
}

message EndChatSessionResponse {
    Result result = 1;
    enum Result {
        OK = 0;
    }
}

message GetRemainingAnonChatsRequest {
    // empty placeholder.  Currently we get user jid from the request header
}

message GetRemainingAnonChatsResponse {
    Result result = 1;
    enum Result {
        OK = 0;
    }

    // The number of chats remaining in a (configurable) time period.
    int32 remaining_chats = 2;
}

// The caller's userJid will be in the request, and must be part of the associated session, else error
message InitiateFriendingRequest {
    common.matching.v1.AnonMatchingSessionKey session_key = 1 [(kik.validation.field_validation) = {
        mandatory: true
    }];
}

message InitiateFriendingResponse {
    Result result = 1;
    enum Result {
        // Friending has been initiated successfully
        OK = 0;
    }
}

// Users send this to submit a new interest
// Send the text in exactly as the user typed it, including white space
message SubmitUserGeneratedInterestRequest {
    string interest = 1 [(kik.validation.field_validation) = {
        mandatory: true
        min_byte_length: 1
        max_byte_length: 255
    }];
}

// Users receive this response after submitting a new interest
// OK means the request was received without error
// It does not mean the interest was approved by moderation or it
// will be trending anytime soon
// RATE_LIMITED means the user has submitted too many interests recently
// and should wait before trying again
message SubmitUserGeneratedInterestResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        RATE_LIMITED = 1;
    }
}

// Represents a chat interest that the user optionally selects for chat matching
message ChatInterest {
    string interest_id = 1 [(kik.validation.field_validation) = {
        mandatory: true
        min_byte_length: 1
        max_byte_length: 255
    }];

    string interest_name = 2 [(kik.validation.field_validation) = {
        mandatory: true
        min_byte_length: 1
        max_byte_length: 255
    }];
}

// Contains details of a 1on1 anonymous chat match session
message SessionDetails {
    // The session id
    common.XiUuid session_id = 1 [(kik.validation.field_validation) = { mandatory: true }];

    // The alias jid of the chat partner.
    common.v1.XiAliasJid chat_partner_alias = 3 [(kik.validation.field_validation) = { mandatory: true }];

    // Chat session end time (UTC)
    google.protobuf.Timestamp session_end_time = 4;

    // Session vote expiry (UTC), the session could be cleaned up any time after this. no further actions can be 
    // taken on this session after this time.
    google.protobuf.Timestamp session_expiry_time = 5;


    common.matching.v1.ChatSessionState session_state = 6;
}

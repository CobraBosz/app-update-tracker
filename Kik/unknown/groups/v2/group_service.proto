syntax = "proto3";

package mobile.groups.v2;

option go_package = "github.com/kikinteractive/xiphias-api-mobile/generated/go/groups/v2;groups";
option java_package = "com.kik.gen.groups.v2";
option objc_class_prefix = "KPBMobileGroupsV2";

import "protobuf_validation.proto";

import "common/v2/model.proto";
import "chats/v2/chat_info.proto";
import "chats/v2/model.proto";
import "groups/v2/groups_common.proto";

service Group {
    // Get short group information for a given group chat.
    rpc GetGroupInfoShort(GetGroupInfoShortRequest) returns (GetGroupInfoShortResponse) {}

    // Get full group information for a given group chat.
    rpc GetGroupInfoFull(GetGroupInfoFullRequest) returns (GetGroupInfoFullResponse) {}

    // Streams batches of banned group members in the given group chat.
    rpc GetBannedGroupMembersStream(GetBannedGroupMembersStreamRequest) returns (stream GetBannedGroupMembersStreamResponse) {}

    // Create a group chat. Returns a ChatId corresponding to the created group chat.
    rpc CreateGroup(CreateGroupRequest) returns (CreateGroupResponse) {}

    // Leave a group chat.
    //
    // Notes:
    // - This should be called by a member of group chat that wishes to _leave_.
    // - A group admin cannot not use this to remove another member from the group chat, see RemoveFromGroup.
    rpc LeaveGroup(LeaveGroupRequest) returns (LeaveGroupResponse) {}

    // Add persona(s) to a group chat.
    //
    // Notes:
    // - A member of the group chat may add other personas to this group chat.
    rpc AddToGroup(AddToGroupRequest) returns (AddToGroupResponse) {}

    // Remove persona(s) from a group chat.
    //
    // Notes:
    // - A group admin should use this to remove another member from the group chat.
    // - This method is only usable by a member that is either an Admin or SuperAdmin.
    // - The group member to remove cannot be the requesting member.
    // - Admins cannot be removed by other Admins except SuperAdmins.
    rpc RemoveFromGroup(RemoveFromGroupRequest) returns (RemoveFromGroupResponse) {}
    
    // Change the name of a group.
    //
    // Notes:
    // - This method is only usable by a member that is either an Admin or SuperAdmin.
    // - Calling this method with no name field set clears the group name, so it will
    //   have no name.
    rpc SetGroupName(SetGroupNameRequest) returns (SetGroupNameResponse) {}
    
    // Gets group information for the group chat specified by an invite code.
    //
    // Notes:
    // - Invite codes are generated by CreateInviteCode, or can come from a classic Kik client.
    rpc LookupGroupByInviteCode(LookupGroupByInviteCodeRequest) returns (LookupGroupByInviteCodeResponse) {}

    // Join a public group chat by specifying the hashcode (aka groupcode, hashtag)
    //
    // Notes:
    // - Used by a user to add themselves to an existing public group.
    rpc JoinPublicGroup(JoinPublicGroupRequest) returns (JoinPublicGroupResponse) {}

    // Join the group chat by invite code.
    //
    // Notes:
    // - Used by a user to add themselves to an existing public OR private group.
    // - Invite Codes can be found by URL or scan codes
    rpc JoinGroupByInviteCode(JoinGroupByInviteCodeRequest) returns (JoinGroupByInviteCodeResponse) {}

    // Generate an invite code for a group chat.
    //
    // Notes:
    // - Used by a user's client when creating a URL or scan code to invite another user to an existing group.
    // - Code creator must be a member of the group to generate an invite code for it.
    // - Invite codes will no longer function if the generating user leaves the group in any way.
    // - Invite codes expire after some period of time.
    // - If an invite code already exists for the creator and specified group and it is still valid then that
    //   existing code will be returned, rather than a new code generated.
    rpc CreateInviteCode(CreateInviteCodeRequest) returns (CreateInviteCodeResponse) {}

    // TODO
    // rpc BanFromGroup(BanFromGroupRequest) returns (BanFromGroupResponse) {}
    // rpc UnBanFromGroup(UnBanFromGroupRequest) returns (UnBanFromGroupResponse) {}
    // rpc PromoteMember(PromoteMemberRequest) returns (PromoteMemberResponse) {}
    // rpc DemoteMember(DemoteMemberRequest) returns (DemoteMemberResponse) {}
}

message GetGroupInfoShortRequest {
    common.v2.ChatId chat_id = 1 [(kik.validation.field_validation) = {
        mandatory: true
    }];

    // Persona with the necessary permissions in the group chat to view short group chat info.
    common.v2.PersonaId requestor = 2 [(kik.validation.field_validation) = {
        mandatory: true
    }];
}

message GetGroupInfoShortResponse {
    Result result = 1;
    enum Result {
        OK = 0;

        // No group was found in which requesting persona could retrieve short group info.
        NOT_FOUND = 1;
    }

    // Set if result == OK.
    common.chats.v2.GroupInfoShort info = 2;
}

message GetGroupInfoFullRequest {
    common.v2.ChatId chat_id = 1 [(kik.validation.field_validation) = {
        mandatory: true
    }];

    // Persona with the necessary permissions in the group chat to view full group chat info.
    common.v2.PersonaId requestor  = 2 [(kik.validation.field_validation) = {
        mandatory: true
    }];
}

message GetGroupInfoFullResponse {
    Result result = 1;
    enum Result {
        OK = 0;

        // No group was found in which requesting persona could retrieve full group info.
        NOT_FOUND = 1;
    }

    // Set if result == OK.
    common.chats.v2.GroupInfoFull info = 2;
}

message GetBannedGroupMembersStreamRequest {
    common.v2.ChatId chat_id = 1 [(kik.validation.field_validation) = {
        mandatory: true
    }];

    // Persona with the necessary permissions in the group chat to view banned members.
    common.v2.PersonaId requestor = 2 [(kik.validation.field_validation) = {
        mandatory: true
    }];
}

message GetBannedGroupMembersStreamResponse {
    Result result = 1;
    enum Result {
        OK = 0;

        // No group was found in which requesting persona could retrieve banned members.
        NOT_FOUND = 1;
    }

    // Set if result == OK
    repeated BannedGroupMember banned_group_members = 2 [(kik.validation.field_validation) = {
        max_repetitions: 1024
    }];
}

// Banned Member of a group
message BannedGroupMember {
    // ID of group member
    // Keep this field compatible with the common.groups.v2.GroupMember message
    common.v2.PersonaId persona_id = 1 [(kik.validation.field_validation) = {
        mandatory: true
    }];
}

message CreateGroupRequest {
    // Creator of the group.
    common.v2.PersonaId creator = 1 [(kik.validation.field_validation) = {
        mandatory: true
    }];

    // Initial members of the group NOT including the group creator.
    // Note that the upper bound on the number of members in a group is a
    // configuration setting and likely to be less than 1024.
    repeated common.v2.PersonaId initial_members = 2 [(kik.validation.field_validation) = {
        max_repetitions: 1024
    }];

    // Optional name of the group.
    common.groups.v2.GroupName group_name = 3;

    // Set this if creating a public group.
    common.groups.v2.PublicGroupFields public_group_fields = 4;

    // Mandatory request id used to make this call idempotent and avoid races.
    // The request id should be unique and randomly generated by the client for each group to be created.
    // The request will fail if this id is not unique, meaning the group
    // is already created/being created.
    common.v2.Uuid request_id = 5 [(kik.validation.field_validation) = {
        mandatory: true
    }];
}

message CreateGroupResponse {
    Result result = 1;
    enum Result {
        OK = 0;

        // The provided creation id already exists so a group is already created/being created.
        CREATION_ID_EXISTS = 1;

        // The provided group creation request contained restricted values.
        // See restricted_field for details on what was rejected.
        POLICY_RESTRICTION = 2;

        // The provided hashtag is not unique and has already been taken. Hashtags must be unique.
        HASHTAG_NOT_UNIQUE = 3;

        // Creator persona was not permitted to create a group chat with the given request.
        NOT_PERMITTED = 4;
    }

    // Chat info for the newly created chat. This will only be set if result == OK.
    common.chats.v2.Chat chat = 2;

    // This field is set if result == POLICY_RESTRICTION.
    // Will contain the all RestrictedFields in the request that caused the request to fail with POLICY_RESTRICTION.
    repeated RestrictedField restricted_fields = 3;
    enum RestrictedField {
        UNSPECIFIED = 0;
        GROUP_NAME = 1;
        GROUP_HASHTAG = 2;
    }
}

message LeaveGroupRequest {
    // Group chat to leave.
    common.v2.ChatId chat_id = 1 [(kik.validation.field_validation) = {
        mandatory: true
    }];

    // Persona leaving group.
    common.v2.PersonaId leaver = 2 [(kik.validation.field_validation) = {
        mandatory: true
    }];
}

message LeaveGroupResponse {
    Result result = 1;
    enum Result {
        OK = 0;
    }
}

message AddToGroupRequest {
    // Chat to add persona to.
    common.v2.ChatId chat_id = 1 [(kik.validation.field_validation) = {
        mandatory: true
    }];

    // Persona adding members to the group.
    // This persona must be a member of the group and have the necessary permissions
    // to add other personas to the group.
    common.v2.PersonaId adder = 2 [(kik.validation.field_validation) = {
        mandatory: true
    }];

    // Persona ids to add to the group.
    repeated common.v2.PersonaId new_members = 3 [(kik.validation.field_validation) = {
        mandatory: true
        min_repetitions: 1
        max_repetitions: 100
    }];
}

message AddToGroupResponse {
    Result result = 1;
    enum Result {
        // The request was successfully processed. Note that this does not mean all new member ids
        // specified in the request were successfully added to the group. See failure_details for any failures.
        OK = 0;

        // Adder was not permitted to add other personas to this group chat.
        NOT_PERMITTED = 1;
    }

    // Personas that failed to be added to the group.
    repeated FailureDetails failure_details = 2;
    message FailureDetails {
        common.v2.PersonaId persona_id = 1;

        Reason reason = 2;
        enum Reason {
            // An unknown/transient failure occurred while adding this persona. Caller should retry.
            UNKNOWN = 0;

            // Persona is banned from the chat.
            BANNED = 1;

            // Group member limit was reached.
            GROUP_FULL = 2;

            // Adder was not permitted to add this persona to the group chat.
            NOT_PERMITTED = 3;
        }
    }
}

message RemoveFromGroupRequest {
    // Group to remove persona from.
    common.v2.ChatId chat_id = 1 [(kik.validation.field_validation) = {
        mandatory: true
    }];

    // Persona removing others from the group.
    common.v2.PersonaId remover = 2 [(kik.validation.field_validation) = {
        mandatory: true
    }];

    // Personas to remove.
    repeated common.v2.PersonaId removees = 3 [(kik.validation.field_validation) = {
        mandatory: true
        min_repetitions: 1
        max_repetitions: 100
    }];
}

message RemoveFromGroupResponse {
    Result result = 1;
    enum Result {
        // The request was successfully processed. Note that this does not mean all removee ids
        // specified in the request were sucessfully removed to the group. See failure_details for any failures.
        OK = 0;

        // Remover was not permitted to remove other personas from this group chat.
        NOT_PERMITTED = 1;
    }

    // Personas that failed to be removed from the group.
    repeated FailureDetails failure_details = 2;
    message FailureDetails {
        common.v2.PersonaId persona_id = 1;

        Reason reason = 2;
        enum Reason {
            // An unknown/transient failure occurred while removing this persona. Caller should retry.
            UNKNOWN = 0;

            // The remover was not permitted to remove this persona from the group chat.
            NOT_PERMITTED = 1;
        }
    }
}

message SetGroupNameRequest {
    // Group to set the name for.
    common.v2.ChatId chat_id = 1 [(kik.validation.field_validation) = {
        mandatory: true
    }];

    // Persona changing the name.
    common.v2.PersonaId changer = 2 [(kik.validation.field_validation) = {
        mandatory: true
    }];

    // New name to set. If this field is not specified then the current name will be cleared.
    common.groups.v2.GroupName group_name = 3;
}

message SetGroupNameResponse {
    Result result = 1;
    enum Result {
        // The name was successfully changed.
        OK = 0;

        // The caller was not permitted to change the group name.
        NOT_PERMITTED = 1;
        
        // The new name was rejected due to its content.
        NAME_RESTRICTED = 2;
    }
}

message LookupGroupByInviteCodeRequest {
    // Invite Code of group to look up.  GroupId is inferred from the code.
    common.groups.v2.GroupInviteCode invite_code = 1 [(kik.validation.field_validation) = {
        mandatory: true
    }];
}

message LookupGroupByInviteCodeResponse {
    Result result = 1;
    enum Result {
        // The group info has been returned.
        OK = 0;
        
        // No group found for the invite code, or group has been deleted, or the inviter is no longer
        // a member of the group, or has been banned, or is inactive.
        NOT_FOUND = 1;
    }
    
    // Set if result == OK.
    common.chats.v2.GroupInfoShort group_info = 2;
    
    // Set if result == OK. The maximum number of members for this group.
    uint32 max_group_size = 3;
}

message JoinPublicGroupRequest {
    // Join token, which clients can aquire from group search.
    //
    // NOTE: By requiring only the join token, we can restrict bad actors in any ability to farm group details.
    //       - Tokens are encrypted, so cannot be forged
    //       - Tokens are not transferrable between users
    //       - Tokens contain the group code, allowing group search results to omit group identification.
    //       - Tokens expire after 1 hour (configured), preventing them from being stockpiled/archived.
    common.groups.v2.PublicGroupJoinToken join_token = 1 [(kik.validation.field_validation) = {
        mandatory: true
    }];
}

message JoinPublicGroupResponse {
    Result result = 1;
    enum Result {
        // The request was successfully processed.  Requestor is now a member of the requested group.
        // NOTE: this is also provided if the user was already a member of the group.
        OK = 0;

        // There was a problem with the provided token.  Token is not usable.
        // NOTE: This is also the return code provided when the group no longer exists.
        INVALID_TOKEN = 1;

        // Requestor was not permitted to join the group (reason intentionally unspecified).
        // Possible causes: Spam bouncer system denial, invalid/incorrect join token,
        // attempting to join a non-public group, etc.
        NOT_PERMITTED = 2;

        // Requestor may not join the group due to a pre-existing banned status.
        BANNED = 3;

        // Group member limit was reached.
        GROUP_FULL = 4;
    }

    // ChatId of the group.  Only provided if the group was successfully joined.
    common.v2.ChatId chat_id = 2 [(kik.validation.field_validation) = {
        mandatory: false
    }];

    // The persona assigned to the joining user within the context of the joined group.
    // Only provided if the group was successfully joined.
    common.v2.PersonaId membership_persona = 3 [(kik.validation.field_validation) = {
        mandatory: false
    }];
}

message JoinGroupByInviteCodeRequest {
    // Invite Code of group to join.  GroupId is inferred from the code.
    common.groups.v2.GroupInviteCode invite_code = 1 [(kik.validation.field_validation) = {
        mandatory: true
    }];

    // Source of invite code (link or scan code)
    CodeSource code_source = 2;
    enum CodeSource {
        CODE = 0;
        LINK = 1;
    }
}

message JoinGroupByInviteCodeResponse {
    Result result = 1;
    enum Result {
        // The request was successfully processed.  Requestor is now a member of the group associated with the invite code.
        OK = 0;

        // Invite code is not valid.
        // This may happen in a few cases:
        //  - Invite code not found
        //  - Group not found
        //  - User that generated the code is no longer a member of the group
        INVALID_INVITE_CODE = 1;

        // Requestor was not permitted to join the group (reason intentionally unspecified).
        // Possible causes: Spam bouncer system denial, etc.
        NOT_PERMITTED = 2;

        // Requestor may not join the group due to a pre-existing banned status.
        BANNED = 3;

        // Group member limit was reached.
        GROUP_FULL = 4;
    }

    // ChatId of the group.  Only provided if the group was successfully joined.
    common.v2.ChatId chat_id = 2 [(kik.validation.field_validation) = {
        mandatory: false
    }];

    // The persona assigned to the joining user within the context of the joined group.
    // Only provided if the group was successfully joined.
    common.v2.PersonaId membership_persona = 3 [(kik.validation.field_validation) = {
        mandatory: false
    }];
}

message CreateInviteCodeRequest {
    // Creator's persona in the group.
    common.v2.PersonaId creator = 1 [(kik.validation.field_validation) = {
        mandatory: true
    }];
    
    // The group the invitation is for.
    common.v2.ChatId chat_id = 2 [(kik.validation.field_validation) = {
        mandatory: true
    }];
}

message CreateInviteCodeResponse {
    Result result = 1;
    enum Result {
        // An invite code was successfully created and has been returned.
        OK = 0;
        
        // Requestor was not permitted to create an invite code for the group (reason intentionally unspecified).
        // Possible causes: Not a member of the group, banned from the group, group is deleted.
        NOT_PERMITTED = 1;
    }
    
    // Invite code that maps to both the group and the inviter. Only provided if result is OK.
    // This code can be used by any user to join the group.
    // This code can be used by both KikX clients and classic clients.
    common.groups.v2.GroupInviteCode invite_code = 2;
}

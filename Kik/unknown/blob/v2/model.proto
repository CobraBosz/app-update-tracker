syntax = "proto3";

package common.blob.v2;

option go_package = "github.com/kikinteractive/xiphias-model-common/generated/go/blob/v2;blob";
option java_package = "com.kik.gen.blob.v2";
option objc_class_prefix = "KPBCommonBlobV2";

import "protobuf_validation.proto";

// BlobReference refers to a conceptual blob of data that can be retrieved in
// various ways. A BlobReference will contain one or more BlobUrls which provides
// URLs to access various versions of the conceptual blob.
message BlobReference {
    // The ID of the blob, which is universally unique.
    //
    // The ID is what should be used with respect to invalidation or any type
    // of moderation.
    Id id = 1 [(kik.validation.field_validation) = {
        mandatory: true
    }];
    message Id {
        bytes raw_value = 1 [(kik.validation.field_validation) = {
            mandatory: true
            min_byte_length: 16
            max_byte_length: 128
        }];
    }

    repeated BlobUrl urls = 2 [(kik.validation.field_validation) = {
        min_repetitions: 1
        max_repetitions: 32
    }];
}

// BlobUrl represents the required URL and metadata to retrieve a specific
// version.
message BlobUrl {
    // The location at which the blob can be retrieved.
    // Currently only http / https schemes are supported.
    //
    // Note: we explicitly don't encode domains into the validation due to
    // the various amounts of internal / staging domains that exist.
    // Implementations should do further validation on domains if necessary.
    string url = 1 [(kik.validation.field_validation) = {
        regex: "^(http|https)://"
        max_byte_length: 256
    }];

    BlobType blob_type = 2;
    MediaType media_type = 3;
}

// UserGeneratedBlobDetails contains extra metadata about a blob that was
// generated by a "user" or potentially "third party" source. The details
// are obtained upon ingestion (i.e. content/profilepic/asset/etc upload),
// and are intended to be available for internal services, such as content
// moderation.
message UserGeneratedBlobDetails {
    // Optional; the original file name (including the extension, if applicable)
    // of the blob being uploaded
    //
    // Useful for law enforcement.
    string original_file_name = 1 [(kik.validation.field_validation) = {
        // 256 should be sufficient for most filesytems[1], but can always
        // be increased at a later time.
        //
        // [1] https://unix.stackexchange.com/questions/32795/what-is-the-maximum-allowed-filename-and-folder-size-with-ecryptfs
        max_byte_length: 256
    }];

    // The MD5 hash of the user supplied blob being uploaded. This may not
    // be the same MD5 as the <BlobType::ORIGINAL, BlobReference> pairing,
    // since that pairing may be the server stored / post-processed blob.
    //
    // Useful for moderation and law enforcement.
    bytes md5 = 2 [(kik.validation.field_validation) = {
        mandatory: false
        min_byte_length: 16
        max_byte_length: 16
    }];
}

enum BlobType {
    // Original represents the original "source" of the content. It is often the
    // highest 'fidelity' setting for media content. It may not be the uploaded
    // source, however.
    //
    // The current (2018-11-14) reason for ORIGINAL not necessarily being the
    // uploaded source is for law enforcement and how systems currently process
    // uploads. Law enforcement often already has access to the files, and may
    // want to verify that that specific file was sent, or other such queries
    // that relate to the uploaded source. However, most upload systems don't
    // currently store the upload source, but instead performs various
    // transformations before storing it, which can change certain identifiers
    // such as the MD5.
    //
    // In the future, upload systems could potentially also store the upload
    // source directly, in which case ORIGINAL would represent that type. To
    // non-internal consumers of blobs (e.g. the clients), there isn't a
    // distinction between ORIGINAL and UPLOAD_SOURCE. Internal systems that
    // care can retrieve the original source metadata via
    // UserGeneratedBlobDetails (note: service / systems still need to be put
    // in place to access it, but legacy systems tend to have this information
    // in other formats).
    ORIGINAL = 0;

    // Preview represents a "smaller" version of ORIGINAL, which should be used
    // in "preview" settings. Examples include image thumbnails, small persona
    // pics in chat lists, etc
    PREVIEW = 1;
}

enum MediaType {
    UKNOWN = 0;

    IMAGE_JPEG = 1;
    IMAGE_PNG = 2;
}

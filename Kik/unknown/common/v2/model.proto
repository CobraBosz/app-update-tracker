// EXPERIMENTAL: The definitions here are experimental and subject to change at
// any moment. They are pulled in from the kikx branch, which should be used as
// the source of truth for any Kikx work. These appear in master to unblock work
// on legacy systems.

syntax = "proto3";

package common.v2;
option java_package = "com.kik.gen.common.v2";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;
option objc_class_prefix = "KPBCommonV2";
option (.kik.checkstyle) = {
    ignore_path: true
};

option go_package = "github.com/kikinteractive/xiphias-model-common/generated/go/common/v2;common";

import "kik_options.proto";
import "protobuf_validation.proto";

message AccountId {
    // In the future; we may move away from this legacy field. At that point,
    // we would migrate to using oneof
    string local_part = 1 [(kik.validation.field_validation) = {
        mandatory: true
        regex: "^[a-z_0-9\\.]{2,30}(_[a-z0-9]{3})?$"
    }];
}

message PersonaId {
    bytes raw_value = 1 [(kik.validation.field_validation) = {
        mandatory: true
        max_byte_length: 128
    }];
}

message ChatId {
    // The raw_value contains a serialized protobuf message that describes
    // the underlying details of the ChatId. The following restrictions
    // are applied:
    //
    //     1. ChatId's are immutable.
    //     2. Clients must never attempt to deserialize the raw_value.
    //     3. Clients _may_ set raw_value to be a serialized mobile.chats.v2.MobileChatId,
    //        but _only_ when creating a ChatId (see (1)).
    //     3. mobile.chats.v2.MobileChatId _must_ be a wire compatible subset of internal.chats.v2.InternalChatId.
    //
    // For (3), the following is an implementation reference for values:
    //
    //     p1 = PersonaId{raw_value: decodeBase64Url("Ch0KG5j-vUg8byR0a2uP71YK7MJobMVQgPzCoMbQ9Q==")}
    //     p2 = PersonaId{raw_value: decodeBase64Url("ChwKGpj_vkE4ZhoaaGrcMXY5MD9O3TsWsCJwt5ht")}
    //
    //     // Internal and mobile implementations may differ, but the result
    //     // for a one-to-one should match.
    //     c1 = constructChatID(p1, p2)
    //     c2 = constructChatID(p2, p1)
    //
    //     // Ordering of p1 and p2 should not matter for construction.
    //     assert(c1 == c2)
    //
    //     // The result should match the following:
    //     assert(c1 == ChatId{raw_value: decodeBase64Url("CkUKIAoeChwKGpj_vkE4ZhoaaGrcMXY5MD9O3TsWsCJwt5htCiEKHwodChuY_r1IPG8kdGtrj-9WCuzCaGzFUID8wqDG0PU=)})
    bytes raw_value = 1 [(kik.validation.field_validation) = {
        mandatory: true
        min_byte_length: 1
        max_byte_length: 512
    }];
}

// OneToOneId should contain the two participants of a one to one chat
// that are sorted in a deterministic way.
message OneToOneId {
    repeated PersonaId personas = 1 [(kik.validation.field_validation) = {
        mandatory: true
        // ordering is defined as the lexicographical sort order of
        // the raw_value's.
        ordered: ASC
        min_repetitions: 2
        max_repetitions: 2
    }];
}

message ClientInstanceId {
    bytes uuid_bytes = 1 [(kik.validation.field_validation) = {
        mandatory: true
        // Expect the length to be exactly 16 or 32 bytes, depending on the
        // encoding of the UUID.
        min_byte_length: 16
        max_byte_length: 32
    }];
}

message Uuid {
    bytes raw_value = 1 [(kik.validation.field_validation) = {
        mandatory: true
        min_byte_length: 16
        max_byte_length: 16
    }];
}

message Email {
    string email = 1 [(kik.validation.field_validation) = {
        mandatory: true
        max_byte_length: 1016
        regex: "^[\\w\\-+]+(\\.[\\w\\-+]+)*@[A-Za-z0-9][A-Za-z0-9\\-]*(\\.[A-Za-z0-9][A-Za-z0-9\\-]*)*(\\.[A-Za-z]{2,})$"
    }];
}

// Used for account registration purposes, and as the internal basis for the user's Genesis PersonaId
message Username {
    // username to check uniqueness of.
    string username = 2 [(kik.validation.field_validation) = {
        mandatory: true
        regex: "^[\\w\\.]{2,30}$"
    }];
}

// Used to represent monetary values, primarily Kin values
message BigDecimal {
    string string_value = 2 [(kik.validation.field_validation) = {
        mandatory: true
        regex: "^(?:[1-9][0-9]{0,14}|0)(?:\\.[0-9]{0,11}[1-9])?$"
    }];
}

syntax = "proto3";

package common.messaging.v2;

option go_package = "github.com/kikinteractive/xiphias-model-common/generated/go/messaging/v2;messaging";
option java_package = "com.kik.gen.messaging.v2";
option objc_class_prefix = "KPBCommonMessagingV2";

import "protobuf_validation.proto";
import "common/v2/model.proto";
import "contactlist/v2/contact_list_common.proto";
import "groups/v2/groups_common.proto";

// Optional Chat-specific metadata included when a kik service generates a message to inform clients about an
// action or event that has taken place.
// This ChatEvent defines further context details about some action or response that has taken place
// within the context of the chat that the message was posted to.
//
// NOTE: ChatEvent metadata may only be provided by a server-generated message.  Messages created by clients
//       which contain a ChatEvent are considered invalid and should be treated as such.
//
// Clients that receive this a message containing a ChatEvent and are familiar with the ChatEvent kind
// should generate their own localized text in the chat rather than using the 'content' field of the message.
// "Legacy" clients (clients NOT familiar with the event type) should use the message 'content' field as a
// fallback, which will be a simple english description of the event.
message ChatEvent {
    oneof kind {
        // 1-999: Events for Group Chats
        GroupCreate group_create = 1;
        GroupMemberAdd group_add = 2;
        GroupMemberLeave group_leave = 3;
        // GroupMemberRemove is the version of a "user kicked" event sent to the remaining active group members.
        GroupMemberRemove group_remove = 4;
        // GroupMemberRemoveToTarget is the version of a "user kicked" event sent to the target of the removal.
        GroupMemberRemoveToTarget group_remove_to_target = 5;
        // GroupBan is an event intended for informing the remaining active members of a group of the ban.
        // NOTE: If the GroupBan action also caused a member removal, only the GroupBan event will be sent.
        GroupBan group_ban = 6;
        GroupUnban group_unban = 7;
        GroupMemberPromote group_promote = 8;
        GroupMemberDemote group_demote = 9;

        // 1000-1999: Events for any kind of chat.
        // ChatInfoChange is used for any chat-specific settings change.  eg: display name, ppic, theme, etc.
        ChatInfoChange chat_info_change = 1000;

        // 2000-2999 Events for One-On-One chats
        FriendshipNotice friendship_notice = 2000;
        InactiveParticipant inactive_participant = 2001;
        GroupInviteNotice group_invite_notice = 2002;
    }

    message GroupCreate {
        // Creator of the group
        common.v2.PersonaId creator = 1 [(kik.validation.field_validation) = {
            mandatory: true
        }];

        // All other members of the group, not including the creator.
        // Optional, since public groups may legitimately be creator-only, specifying no initial members.
        // Note: Max repetitions should match the value found in mobile group service's create request.
        repeated common.v2.PersonaId initial_members = 2 [(kik.validation.field_validation) = {
            max_repetitions: 1024
        }];

        // The ChatId that this group is being upgraded from,
        // which is expected to be one-to-one chat.
        //
        // If present, clients should try and copy the contents
        // of the chat specified by upgraded_chat_id from local
        // storage into Chat the this event came in through.
        // Server will not clone the logs.
        common.v2.ChatId upgraded_chat_id = 3;
    }

    message GroupMemberAdd {
        // Member(s) which have been added to the group.
        repeated common.v2.PersonaId new_members = 1 [(kik.validation.field_validation) = {
            mandatory: true
            max_repetitions: 100
        }];

        // User whose action was the origin of the new members being added.
        // Note: If someone joined via invite/scan code, this is the user which created the code.
        //       If someone joined by searching and adding themselves, then this field will be empty.
        common.v2.PersonaId inviter = 2;

        // Mechanism by which the inviter invited the members added
        InviteVia via = 3;
        enum InviteVia {
            // User joined by finding the group and self-inviting (i.e. no inviter)
            NOT_SPECIFIED = 0;
            // User(s) were directly added to the group by inviter.
            DIRECT_ADD = 1;
            // User joined via an invite link generated by the inviter.
            INVITE_CODE = 2;
            // User joined via a scan code for the group, generated by the inviter.
            SCAN_CODE = 3;
        }
    }

    message GroupMemberLeave {
        common.v2.PersonaId member = 1 [(kik.validation.field_validation) = {
            mandatory: true
        }];
    }

    // event which is provided to the kicked or banned user
    message GroupMemberRemoveToTarget {
        common.v2.PersonaId removed_member = 1 [(kik.validation.field_validation) = {
            mandatory: true
        }];
        // TODO: determine if we should include a "banned" flag here (classic does not specify this to user)
    }

    // event used to inform others of a kick event.
    message GroupMemberRemove {
        common.v2.PersonaId removed_member = 1 [(kik.validation.field_validation) = {
            mandatory: true
        }];
        common.v2.PersonaId acting_admin = 2 [(kik.validation.field_validation) = {
            mandatory: true
        }];
    }

    message GroupBan {
        common.v2.PersonaId banned_user = 1 [(kik.validation.field_validation) = {
            mandatory: true
        }];
        common.v2.PersonaId acting_admin = 2 [(kik.validation.field_validation) = {
            mandatory: true
        }];
    }

    message GroupUnban {
        common.v2.PersonaId unbanned_user = 1 [(kik.validation.field_validation) = {
            mandatory: true
        }];
        common.v2.PersonaId acting_admin = 2 [(kik.validation.field_validation) = {
            mandatory: true
        }];
    }

    message GroupMemberPromote {
        common.v2.PersonaId promoted_member = 1 [(kik.validation.field_validation) = {
            mandatory: true
        }];
        // new_status indicates what status the promoted member was changed to.
        PromotionStatus new_status = 2;
        enum PromotionStatus {
            ADMIN = 0;
            OWNER = 1;
        }
        // acting_admin is the admin that did the promoting.  May be absent if system has done an auto-promotion.
        common.v2.PersonaId acting_admin = 3;
    }

    message GroupMemberDemote {
        common.v2.PersonaId demoted_member = 1 [(kik.validation.field_validation) = {
            mandatory: true
        }];
        // acting_admin is the admin that did the demoting.
        common.v2.PersonaId acting_admin = 2 [(kik.validation.field_validation) = {
            mandatory: true
        }];
    }

    message ChatInfoChange {
        // acting_member is the participant (admin) that initiated the change.
        common.v2.PersonaId acting_member = 1 [(kik.validation.field_validation) = {
            mandatory: true
        }];
        repeated ChangedFeature features = 2 [(kik.validation.field_validation) = {
            mandatory: true
            min_repetitions: 1
            max_repetitions: 10
        }];
        // NOTE: Needed to define ChangedFeature as a message to allow validation of repetition
        message ChangedFeature {
        	Feature feature = 1;
        	enum Feature {
	            DISPLAY_NAME = 0;
	            PROFILE_PIC = 1;
	            BIO = 2;
	            THEME = 3;
	            // TODO: other features?
	        }
        }
    }

    // Indication of a friend add from the server which happens when user A adds user B to their contact list.
    message FriendshipNotice {
        common.v2.PersonaId acting_user = 1 [(kik.validation.field_validation) = {
            mandatory: true
        }];
        common.v2.PersonaId target_user = 2 [(kik.validation.field_validation) = {
            mandatory: true
        }];
        common.contactlist.v2.UserFriendContext friend_context = 3;
    }

    // InactiveParticipant indicates to one particpant that the other has been inactive for a "long" period of time.
    message InactiveParticipant {
        // TODO: Include a rough estimate of inactivity time? (classic does NOT do this)
    }

    // Message generated by server when someone attempts to invite a user into a group where the inviting user
    // is not in the contactlist of the invitee.
    // Instead, this message is sent to the invitee in a one-to-one context, with a participant filter such that only
    // the invitee receives it.  The client display of this message should present a link for easy joining of the group.
    message GroupInviteNotice {
        common.v2.PersonaId inviting_user = 1 [(kik.validation.field_validation) = {
            mandatory: true
        }];
        common.v2.ChatId group_chat_id = 2 [(kik.validation.field_validation) = {
            mandatory: true
        }];
        common.groups.v2.GroupInviteCode invite_code = 3 [(kik.validation.field_validation) = {
            mandatory: true
        }];
    }
}

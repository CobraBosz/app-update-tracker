syntax = "proto3";

package common.kin.payment.v1;

option java_package = "com.kik.kin.payment.model";
option go_package = "github.com/kikinteractive/xiphias-model-common/generated/go/kin/payment/v1;payment";

import "protobuf_validation.proto";
import "common_model.proto";
import "common/v2/model.proto";

// DEPRECATED
// TODO Remove after KikX hard switch
// Contains information related to a specific payment
message PaymentInfo {
    // The feature a payment is associated with
    Feature feature = 1;

    FeatureData feature_data = 2;

    // The amount of Kin in this payment. No min/max values are set because the size of Kin payments in the long term
    // aren't defined.
    KinAmount kin_amount = 3 [(kik.validation.field_validation) = {
        mandatory: true
    }];
}

// DEPRECATED
// TODO Remove after KikX hard switch
enum Feature {
    UNKNOWN = 0;
    PUBLIC_GROUP_ADMIN_TIP = 1;
    PUBLIC_GROUP_MESSAGE_TIP = 2;
}

// DEPRECATED
// TODO Remove after KikX hard switch
message FeatureData {
    oneof kind {
        PublicGroupAdminTipData public_group_admin_tip_data = 1;
        PublicGroupMessageTipData public_group_message_tip_data = 2;
    }
}

// DEPRECATED
// TODO Remove after KikX hard switch
message PublicGroupAdminTipData {
    common.XiGroupJid group = 1 [(kik.validation.field_validation) = {mandatory : true}];
}

// DEPRECATED
message PublicGroupMessageTipData {
    common.XiGroupJid group_jid = 1 [(kik.validation.field_validation) = {mandatory : true}];

    common.XiUuid message_id = 2 [(kik.validation.field_validation) = { mandatory: true }];

    MessageType message_type = 3;
    enum MessageType {
        UNKNOWN = 0;
        TEXT = 1;
        WEB_PAGE = 2;
        IMAGE_GALLERY = 3;
        IMAGE_CAMERA = 4;
        GIF = 5;
        VIDEO_GALLERY = 6;
        VIDEO_CAMERA = 7;
    }
}

message KinAmount {
    double amount_double = 1 [deprecated = true];

    common.v2.BigDecimal amount = 2;
}

// TransactionType defines what type of transaction should be processed for the offer
// Clients should display and handle each transaction types differently.
enum TransactionType {
    UNKNOWN_TYPE = 0;
    // Transactions where user will earn Kin
    EARN = 1;
    // Transaction that users will spend Kin
    SPEND = 2;
    // Transaction that transfer Kin between users
    PAY_TO_USER = 3;
}

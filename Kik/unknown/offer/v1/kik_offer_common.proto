syntax = "proto3";

package common.offer.v1;

option java_package = "com.kik.offer.model";
option go_package = "github.com/kikinteractive/xiphias-model-common/generated/go/offer/v1;offer";

import "protobuf_validation.proto";
import "common_model.proto";
import "google/protobuf/timestamp.proto";
import "kin/payment/v1/payment_common.proto";

// KikOfferId uniquely defines an offer. This id will always be present for all offers
// Here are some example of an offer id (actual ids might be different):
// - `theme_id`: when an offer is an opporunity to buy a theme
// - `anon_completed_ten_chats`: an offer which is available after completing ten chats
// - `anon_received_five_thumbs_up`: an offer which is available after receiving five thumbs up 
// - `anon_five_chats`: an offer to spend Kin to receive five anonymous chats
// 
// There is also a KikUserOfferId, which is present when the offer has an associated user. If the offer is not 
// yet associated to a user, client can use KikOfferId to generate KikUserOfferId.
message KikOfferId {
    string id = 1 [(kik.validation.field_validation) = {
        mandatory: true
        max_byte_length: 256
    }];
}

// When an offer has an associated user, KikUserOfferId will contain a unique id that represents the user offer.
// Typically, "Spend" offers will not have KikUserOfferId present. When a user agrees to claim the offer 
// (i.e buy a theme, or spend Kin to earn chats), a KikUserOfferId is generated for that offer. 
message KikUserOfferId {
    string id = 1 [(kik.validation.field_validation) = { 
        mandatory: true
        max_byte_length: 256 
    }];
}

// An id that uniquely identifies the offer
// The presence of KikOfferId indicates that this offer is public (available to all users)
// The presence of KikUserOfferIdd indicates that this offer is available to the user only and is ready to be claimed
message KikOfferIdOrUserOfferId {
    oneof id {
        KikOfferId kik_offer_id = 1;
        KikUserOfferId kik_user_offer_id = 2;
    }
}

// KikOffer is sent to the mobile clients. It encapsulates all the information
// that client needs to process an offer
message KikOffer {

    // KikOfferId uniquely identifies the base kik offer
    KikOfferId kik_offer_id = 1 [(kik.validation.field_validation) = { mandatory: true }];

    // KikUserOfferId will be present when the offer has been associated with a user and is ready to claim
    KikUserOfferId kik_user_offer_id = 2;

    // Feature group that offer belongs to. This is used to group the offers
    FeatureGroup feature_group = 3;

    // Amount of Kin for the transaction. For certain offers, this field will a default amount that users can override.
    // For example: an group admin tipping offer (PAY_TO_USER) will have a default `amount` set.
    //              The user will decide the amount and can override the default amount
    //
    // An offer where KikUserOfferId is present must have a value for this field.
    common.kin.payment.v1.KinAmount amount = 4 [(kik.validation.field_validation) = { mandatory: true }];

    // Transaction type e.g. earn, spend, pay_2_user
    common.kin.payment.v1.TransactionType transaction_type = 5;

    // Title for the offer. This could be displayed by the clients to the end users
    string title = 6 [(kik.validation.field_validation) = {
        mandatory: true
        max_byte_length: 256
    }];

    // Description for the offer. This could be displayed by the clients to the end users
    string description = 7 [(kik.validation.field_validation) = {
        mandatory: true
        max_byte_length: 1024
    }];

    // Optional end date for the offer
    google.protobuf.Timestamp end_date = 8;

    // If this is set to true, clients should claim the offer without user explicit input
    bool claim_silently = 9;

    // Any extra data associated with the offer
    KikOfferData kik_offer_data = 10;
}

// FeatureGroup defines a logical grouping of offers into a group based on context and functionality
// For example: all offers related to anonymous matching are defined under ANON_MATCHING
// FeatureGroup definition is arbitrary. However, a good practice is to take into account context and/or transaction
// type
enum FeatureGroup {
    UNKNOWN = 0;
    // All kik offers that are related to user tipping (pay-to-user) other users in a group
    GROUP_TIPPING = 1;
    // All kik offers that are related to the anonymous matching feature
    ANON_MATCHING = 2;
}

// User offer data define any extra pieces of information that should be included in offer requests by clients
// User offer data are used to validate client request and are included in transaction records
message UserOfferData {
    oneof kind {
        GroupTipping group_tipping_data = 1;
    }
}

message GroupTipping {
    common.XiGroupJid group_jid = 1 [(kik.validation.field_validation) = {mandatory : true}];

    MessageData message_data = 2;
}

message MessageData {
    common.XiUuid id = 1 [(kik.validation.field_validation) = { mandatory: true }];

    Type type = 2;
    enum Type {
        UNKNOWN = 0;
        TEXT = 1;
        WEB_PAGE = 2;
        IMAGE_GALLERY = 3;
        IMAGE_CAMERA = 4;
        GIF = 5;
        VIDEO_GALLERY = 6;
        VIDEO_CAMERA = 7;
    }
}

// Kik offer data defines any extra data that is related to the kik offer
// This data can be used by clients to display certain details about the offer 
// that is specific to that offer
message KikOfferData {
    oneof kind {
        AnonMatchingBuyChatData anon_matching_buy_chat_data = 1;
    }
}

// Extra kik offer data for anonymous matching buy chat offers
message AnonMatchingBuyChatData {
    uint32 number_of_chats = 1;
}

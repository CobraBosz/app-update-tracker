syntax = "proto3";
package mobile.offer.v1;

option java_package = "com.kik.offer.rpc";
option go_package = "github.com/kikinteractive/xiphias-api-mobile/generated/go/offer/v1;offer";

import "protobuf_validation.proto";
import "offer/v1/kik_offer_common.proto";
import "kin/payment/v1/payment_common.proto";

//*************************************************************************************************************
// Kik Offer service
//
// The kik offer service is responsible for managing the offers that are available to the users.
// The offers are broadly divided into two categories:
//  - Public offers: 
//      Public offers are available to all users. Some examples of public offers include: chat themes,
//      avatars, emojis, group admin tipping
//  - User offers:
//      A user offer is only available after it has been assigned to that user. Typically, these
//      offers are managed by a service (e.g. anonymous matching) and are assigned to users based on certain
//      actions that user did in the service. As an example, a "ten_chats_completed" offer is assigned to a user
//      after he/she completes ten anonymous chats.
//      
// 
// Offer also has a transaction type:
//  - Earn: An offer which results in user earning specified amount of Kin
//  - Spend: An offer where user spend Kin to buy product or service (buying a theme, avatar, or free anonymous chats)
//  - Pay to User: An offer user to transfer Kin from one user to another.
// 
// Each offer also has an associated Feature ID, which is used to group offers together. For examples, all 
// anonymous matching offers can be grouped together with `feature_id`=`anon_matching`
//*************************************************************************************************************
service KikOffer {

    // Retrieves all unclaimed offers available to the user for the provided feature id
    rpc GetKikOffersByFeature (GetKikOffersByFeatureRequest) returns (GetKikOffersByFeatureResponse);
}

message GetKikOffersByFeatureRequest {
    // Feature group
    common.offer.v1.FeatureGroup feature_group = 1;

    // Can be used to filter offers by transaction types
    common.kin.payment.v1.TransactionType transaction_type = 2;
}

message GetKikOffersByFeatureResponse {
    Result result = 1;
    enum Result {
        OK = 0;
    }

    repeated common.offer.v1.KikOffer offers = 2 [(kik.validation.field_validation) = {
        mandatory: false
        max_repetitions: 100
    }];

    // TODO: not implemented yet 
    PageToken page_token = 3;
}

message PageToken {
    bytes token = 1 [(kik.validation.field_validation) = {
        max_byte_length: 256
    }];
}

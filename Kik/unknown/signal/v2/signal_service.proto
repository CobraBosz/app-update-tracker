syntax = "proto3";

package mobile.signal.v2;

option go_package = "github.com/kikinteractive/xiphias-api-mobile/generated/go/signal/v2;signal";
option java_package = "com.kik.gen.signal.v2";
option objc_class_prefix = "KPBMobileSignalV2";

import "protobuf_validation.proto";
import "signal/v2/model.proto";

// Signal is the public facing service in which user clients receive signals
// that indicate that certain actions should be performed.
//
// Signals are durable in the sense that if an action is signaled to be performed,
// an equivalent signal will be delivered to that client (subject to extreme
// edge cases, such as termination). Signal deliveries can be viewed as a log,
// where clients receive the log in order, and advanced their position in the log.
//
// There is no causal ordering between signals. For more detailed semantics of
// signals themselves, see the common model definition:
// https://github.com/kikinteractive/xiphias-model-common/blob/master/proto/signal/v2/model.proto#L20
service Signal {
    // OpenSignalStream opens a long lived stream that flushes all unacked
    // signals from the signal log, and notifies 'real time' signals as they
    // come in. That is, if a signal is sent to a user, and that user has an
    // open stream, that signal will be sent on that stream.
    //
    // Clients should call UpdateStreamPointer when they successfully receive
    // _and_ process signals. Due to the log ordering nature of signals, signal
    // acking must obey the following rule:
    //
    //     Given a set of signals, S, a client may only ack a signal S[n] if
    //     all signals in S for i < n have been successfully processed.
    //
    // Acking every signal in order as they come in would be a valid approach,
    // but clients may process a batch, then ack the batch (provided all signals
    // in said batch have been processed successfully) for performance reasons.
    rpc OpenSignalStream(OpenSignalStreamRequest) returns (stream Signals);

    // UpdateStreamPointer updates the clients position in the signal stream.
    rpc UpdateStreamPointer(UpdateStreamPointerRequest) returns (UpdateStreamPointerResponse);
}

message OpenSignalStreamRequest {
}

message Signals {
    repeated common.signal.v2.Signal signals = 1 [(kik.validation.field_validation) = {
        max_repetitions: 1024
    }];
}

message UpdateStreamPointerRequest {
    common.signal.v2.Signal.Id signal_id = 1 [(kik.validation.field_validation) = {
        mandatory: true
    }];
}

message UpdateStreamPointerResponse {
    Result result = 1;
    enum Result {
        OK = 0;
    }
}
